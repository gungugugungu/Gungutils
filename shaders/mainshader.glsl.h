#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline:
        sokol-shdc --input ./shaders/mainshader.glsl --output ./shaders/mainshader.glsl.h --slang glsl430

    Overview:
    =========
    Shader program: 'main':
        Get shader desc: main_shader_desc(sg_query_backend());
        Vertex Shader: vs
        Fragment Shader: fs
        Attributes:
            ATTR_main_aPos => 0
            ATTR_main_aNormal => 1
            ATTR_main_aTexCoord => 2
    Bindings:
        Uniform block 'vs_params':
            C struct: vs_params_t
            Bind slot: UB_vs_params => 0
        Image '_diffuse_tex2D':
            Image type: SG_IMAGETYPE_2D
            Sample type: SG_IMAGESAMPLETYPE_FLOAT
            Multisampled: false
            Bind slot: IMG__diffuse_tex2D => 0
        Sampler 'diffuse_tex_smp':
            Type: SG_SAMPLERTYPE_FILTERING
            Bind slot: SMP_diffuse_tex_smp => 0
*/
#if !defined(SOKOL_GFX_INCLUDED)
#error "Please include sokol_gfx.h before mainshader.glsl.h"
#endif
#if !defined(SOKOL_SHDC_ALIGN)
#if defined(_MSC_VER)
#define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
#else
#define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
#endif
#endif
#define ATTR_main_aPos (0)
#define ATTR_main_aNormal (1)
#define ATTR_main_aTexCoord (2)
#define UB_vs_params (0)
#define IMG__diffuse_tex2D (0)
#define SMP_diffuse_tex_smp (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct vs_params_t {
    HMM_Mat4 model;
    HMM_Mat4 view;
    HMM_Mat4 projection;
    float opacity;
    int enable_shading;
    uint8_t _pad_200[8];
} vs_params_t;
#pragma pack(pop)
/*
    #version 430

    struct vs_params
    {
        mat4 model;
        mat4 view;
        mat4 projection;
        float opacity;
        int enable_shading;
    };

    uniform vs_params _19;

    layout(location = 0) in vec3 aPos;
    layout(location = 0) out vec2 TexCoord;
    layout(location = 2) in vec2 aTexCoord;
    layout(location = 1) out float v_opacity;
    layout(location = 2) out vec3 vNormal;
    layout(location = 1) in vec3 aNormal;
    layout(location = 3) flat out int venable_shading;

    void main()
    {
        gl_Position = ((_19.projection * _19.view) * _19.model) * vec4(aPos, 1.0);
        TexCoord = aTexCoord;
        v_opacity = _19.opacity;
        mat4 _61 = transpose(inverse(_19.model));
        vNormal = normalize(mat3(_61[0].xyz, _61[1].xyz, _61[2].xyz) * aNormal);
        venable_shading = _19.enable_shading;
    }

*/
static const uint8_t vs_source_glsl430[759] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x33,0x30,0x0a,0x0a,0x73,0x74,
    0x72,0x75,0x63,0x74,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x6d,0x6f,0x64,0x65,0x6c,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x76,0x69,0x65,0x77,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x70,0x72,0x6f,0x6a,0x65,0x63,0x74,
    0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x6f,
    0x70,0x61,0x63,0x69,0x74,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,
    0x65,0x6e,0x61,0x62,0x6c,0x65,0x5f,0x73,0x68,0x61,0x64,0x69,0x6e,0x67,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x73,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x20,0x5f,0x31,0x39,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,
    0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,
    0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x61,0x50,0x6f,0x73,0x3b,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x54,0x65,0x78,
    0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,0x29,0x20,0x69,0x6e,0x20,0x76,
    0x65,0x63,0x32,0x20,0x61,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x31,0x29,0x20,0x6f,0x75,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x76,0x5f,
    0x6f,0x70,0x61,0x63,0x69,0x74,0x79,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,0x29,0x20,0x6f,0x75,
    0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x61,0x4e,0x6f,
    0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,
    0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x33,0x29,0x20,0x66,0x6c,0x61,0x74,0x20,
    0x6f,0x75,0x74,0x20,0x69,0x6e,0x74,0x20,0x76,0x65,0x6e,0x61,0x62,0x6c,0x65,0x5f,
    0x73,0x68,0x61,0x64,0x69,0x6e,0x67,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,
    0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,
    0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x28,0x28,0x5f,0x31,0x39,0x2e,
    0x70,0x72,0x6f,0x6a,0x65,0x63,0x74,0x69,0x6f,0x6e,0x20,0x2a,0x20,0x5f,0x31,0x39,
    0x2e,0x76,0x69,0x65,0x77,0x29,0x20,0x2a,0x20,0x5f,0x31,0x39,0x2e,0x6d,0x6f,0x64,
    0x65,0x6c,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x61,0x50,0x6f,0x73,0x2c,
    0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x54,0x65,0x78,0x43,0x6f,
    0x6f,0x72,0x64,0x20,0x3d,0x20,0x61,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x76,0x5f,0x6f,0x70,0x61,0x63,0x69,0x74,0x79,0x20,0x3d,
    0x20,0x5f,0x31,0x39,0x2e,0x6f,0x70,0x61,0x63,0x69,0x74,0x79,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x5f,0x36,0x31,0x20,0x3d,0x20,0x74,0x72,0x61,
    0x6e,0x73,0x70,0x6f,0x73,0x65,0x28,0x69,0x6e,0x76,0x65,0x72,0x73,0x65,0x28,0x5f,
    0x31,0x39,0x2e,0x6d,0x6f,0x64,0x65,0x6c,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x76,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,
    0x69,0x7a,0x65,0x28,0x6d,0x61,0x74,0x33,0x28,0x5f,0x36,0x31,0x5b,0x30,0x5d,0x2e,
    0x78,0x79,0x7a,0x2c,0x20,0x5f,0x36,0x31,0x5b,0x31,0x5d,0x2e,0x78,0x79,0x7a,0x2c,
    0x20,0x5f,0x36,0x31,0x5b,0x32,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x20,0x2a,0x20,0x61,
    0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x6e,
    0x61,0x62,0x6c,0x65,0x5f,0x73,0x68,0x61,0x64,0x69,0x6e,0x67,0x20,0x3d,0x20,0x5f,
    0x31,0x39,0x2e,0x65,0x6e,0x61,0x62,0x6c,0x65,0x5f,0x73,0x68,0x61,0x64,0x69,0x6e,
    0x67,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 430

    const int _53[16] = int[](0, 8, 2, 10, 12, 4, 14, 6, 3, 11, 1, 9, 15, 7, 13, 5);

    layout(binding = 16) uniform sampler2D _diffuse_tex2D_diffuse_tex_smp;

    layout(location = 0) in vec2 TexCoord;
    layout(location = 2) in vec3 vNormal;
    layout(location = 3) flat in int venable_shading;
    layout(location = 0) out vec4 FragColor;
    layout(location = 1) in float v_opacity;

    float bayer4x4(vec2 fragXY)
    {
        ivec2 _22 = ivec2(floor(fragXY)) & ivec2(3);
        return (float(_53[(_22.y * 4) + _22.x]) + 0.5) * 0.0625;
    }

    void main()
    {
        vec4 _80 = texture(_diffuse_tex2D_diffuse_tex_smp, TexCoord);
        vec2 param = gl_FragCoord.xy;
        vec3 finalRgb;
        if (venable_shading == 1)
        {
            finalRgb = clamp(_80.xyz * (vec3(0.17499999701976776123046875) + (vec3(1.0) * (round(clamp(max(dot(normalize(vNormal), vec3(0.3244428336620330810546875, 0.811107099056243896484375, 0.4866642653942108154296875)), 0.0) + ((bayer4x4(param) - 0.5) * 0.3333333432674407958984375), 0.0, 1.0) * 3.0) * 0.3333333432674407958984375))), vec3(0.0), vec3(1.0));
        }
        else
        {
            finalRgb = _80.xyz;
        }
        FragColor = vec4(finalRgb, _80.w * v_opacity);
    }

*/
static const uint8_t fs_source_glsl430[1158] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x33,0x30,0x0a,0x0a,0x63,0x6f,
    0x6e,0x73,0x74,0x20,0x69,0x6e,0x74,0x20,0x5f,0x35,0x33,0x5b,0x31,0x36,0x5d,0x20,
    0x3d,0x20,0x69,0x6e,0x74,0x5b,0x5d,0x28,0x30,0x2c,0x20,0x38,0x2c,0x20,0x32,0x2c,
    0x20,0x31,0x30,0x2c,0x20,0x31,0x32,0x2c,0x20,0x34,0x2c,0x20,0x31,0x34,0x2c,0x20,
    0x36,0x2c,0x20,0x33,0x2c,0x20,0x31,0x31,0x2c,0x20,0x31,0x2c,0x20,0x39,0x2c,0x20,
    0x31,0x35,0x2c,0x20,0x37,0x2c,0x20,0x31,0x33,0x2c,0x20,0x35,0x29,0x3b,0x0a,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x62,0x69,0x6e,0x64,0x69,0x6e,0x67,0x20,0x3d,
    0x20,0x31,0x36,0x29,0x20,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x5f,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x5f,
    0x74,0x65,0x78,0x32,0x44,0x5f,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x5f,0x74,0x65,
    0x78,0x5f,0x73,0x6d,0x70,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,
    0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,
    0x76,0x65,0x63,0x32,0x20,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x32,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x4e,0x6f,0x72,
    0x6d,0x61,0x6c,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x33,0x29,0x20,0x66,0x6c,0x61,0x74,0x20,0x69,
    0x6e,0x20,0x69,0x6e,0x74,0x20,0x76,0x65,0x6e,0x61,0x62,0x6c,0x65,0x5f,0x73,0x68,
    0x61,0x64,0x69,0x6e,0x67,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,
    0x76,0x65,0x63,0x34,0x20,0x46,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x76,0x5f,
    0x6f,0x70,0x61,0x63,0x69,0x74,0x79,0x3b,0x0a,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x62,0x61,0x79,0x65,0x72,0x34,0x78,0x34,0x28,0x76,0x65,0x63,0x32,0x20,0x66,0x72,
    0x61,0x67,0x58,0x59,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x69,0x76,0x65,0x63,
    0x32,0x20,0x5f,0x32,0x32,0x20,0x3d,0x20,0x69,0x76,0x65,0x63,0x32,0x28,0x66,0x6c,
    0x6f,0x6f,0x72,0x28,0x66,0x72,0x61,0x67,0x58,0x59,0x29,0x29,0x20,0x26,0x20,0x69,
    0x76,0x65,0x63,0x32,0x28,0x33,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,
    0x75,0x72,0x6e,0x20,0x28,0x66,0x6c,0x6f,0x61,0x74,0x28,0x5f,0x35,0x33,0x5b,0x28,
    0x5f,0x32,0x32,0x2e,0x79,0x20,0x2a,0x20,0x34,0x29,0x20,0x2b,0x20,0x5f,0x32,0x32,
    0x2e,0x78,0x5d,0x29,0x20,0x2b,0x20,0x30,0x2e,0x35,0x29,0x20,0x2a,0x20,0x30,0x2e,
    0x30,0x36,0x32,0x35,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,
    0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,
    0x5f,0x38,0x30,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x5f,0x64,
    0x69,0x66,0x66,0x75,0x73,0x65,0x5f,0x74,0x65,0x78,0x32,0x44,0x5f,0x64,0x69,0x66,
    0x66,0x75,0x73,0x65,0x5f,0x74,0x65,0x78,0x5f,0x73,0x6d,0x70,0x2c,0x20,0x54,0x65,
    0x78,0x43,0x6f,0x6f,0x72,0x64,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,
    0x32,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x67,0x6c,0x5f,0x46,0x72,0x61,
    0x67,0x43,0x6f,0x6f,0x72,0x64,0x2e,0x78,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,
    0x65,0x63,0x33,0x20,0x66,0x69,0x6e,0x61,0x6c,0x52,0x67,0x62,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x69,0x66,0x20,0x28,0x76,0x65,0x6e,0x61,0x62,0x6c,0x65,0x5f,0x73,0x68,
    0x61,0x64,0x69,0x6e,0x67,0x20,0x3d,0x3d,0x20,0x31,0x29,0x0a,0x20,0x20,0x20,0x20,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x69,0x6e,0x61,0x6c,0x52,
    0x67,0x62,0x20,0x3d,0x20,0x63,0x6c,0x61,0x6d,0x70,0x28,0x5f,0x38,0x30,0x2e,0x78,
    0x79,0x7a,0x20,0x2a,0x20,0x28,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x31,0x37,0x34,
    0x39,0x39,0x39,0x39,0x39,0x37,0x30,0x31,0x39,0x37,0x36,0x37,0x37,0x36,0x31,0x32,
    0x33,0x30,0x34,0x36,0x38,0x37,0x35,0x29,0x20,0x2b,0x20,0x28,0x76,0x65,0x63,0x33,
    0x28,0x31,0x2e,0x30,0x29,0x20,0x2a,0x20,0x28,0x72,0x6f,0x75,0x6e,0x64,0x28,0x63,
    0x6c,0x61,0x6d,0x70,0x28,0x6d,0x61,0x78,0x28,0x64,0x6f,0x74,0x28,0x6e,0x6f,0x72,
    0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x76,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x29,0x2c,
    0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x33,0x32,0x34,0x34,0x34,0x32,0x38,0x33,
    0x33,0x36,0x36,0x32,0x30,0x33,0x33,0x30,0x38,0x31,0x30,0x35,0x34,0x36,0x38,0x37,
    0x35,0x2c,0x20,0x30,0x2e,0x38,0x31,0x31,0x31,0x30,0x37,0x30,0x39,0x39,0x30,0x35,
    0x36,0x32,0x34,0x33,0x38,0x39,0x36,0x34,0x38,0x34,0x33,0x37,0x35,0x2c,0x20,0x30,
    0x2e,0x34,0x38,0x36,0x36,0x36,0x34,0x32,0x36,0x35,0x33,0x39,0x34,0x32,0x31,0x30,
    0x38,0x31,0x35,0x34,0x32,0x39,0x36,0x38,0x37,0x35,0x29,0x29,0x2c,0x20,0x30,0x2e,
    0x30,0x29,0x20,0x2b,0x20,0x28,0x28,0x62,0x61,0x79,0x65,0x72,0x34,0x78,0x34,0x28,
    0x70,0x61,0x72,0x61,0x6d,0x29,0x20,0x2d,0x20,0x30,0x2e,0x35,0x29,0x20,0x2a,0x20,
    0x30,0x2e,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x34,0x33,0x32,0x36,0x37,0x34,0x34,
    0x30,0x37,0x39,0x35,0x38,0x39,0x38,0x34,0x33,0x37,0x35,0x29,0x2c,0x20,0x30,0x2e,
    0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x20,0x2a,0x20,0x33,0x2e,0x30,0x29,0x20,0x2a,
    0x20,0x30,0x2e,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x34,0x33,0x32,0x36,0x37,0x34,
    0x34,0x30,0x37,0x39,0x35,0x38,0x39,0x38,0x34,0x33,0x37,0x35,0x29,0x29,0x29,0x2c,
    0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x33,
    0x28,0x31,0x2e,0x30,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,
    0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x66,0x69,0x6e,0x61,0x6c,0x52,0x67,0x62,0x20,0x3d,0x20,
    0x5f,0x38,0x30,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,
    0x20,0x20,0x20,0x46,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,
    0x65,0x63,0x34,0x28,0x66,0x69,0x6e,0x61,0x6c,0x52,0x67,0x62,0x2c,0x20,0x5f,0x38,
    0x30,0x2e,0x77,0x20,0x2a,0x20,0x76,0x5f,0x6f,0x70,0x61,0x63,0x69,0x74,0x79,0x29,
    0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
static inline const sg_shader_desc* main_shader_desc(sg_backend backend) {
    if (backend == SG_BACKEND_GLCORE) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)vs_source_glsl430;
            desc.vertex_func.entry = "main";
            desc.fragment_func.source = (const char*)fs_source_glsl430;
            desc.fragment_func.entry = "main";
            desc.attrs[0].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[0].glsl_name = "aPos";
            desc.attrs[1].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[1].glsl_name = "aNormal";
            desc.attrs[2].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[2].glsl_name = "aTexCoord";
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_VERTEX;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 208;
            desc.uniform_blocks[0].glsl_uniforms[0].type = SG_UNIFORMTYPE_MAT4;
            desc.uniform_blocks[0].glsl_uniforms[0].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[0].glsl_name = "_19.model";
            desc.uniform_blocks[0].glsl_uniforms[1].type = SG_UNIFORMTYPE_MAT4;
            desc.uniform_blocks[0].glsl_uniforms[1].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[1].glsl_name = "_19.view";
            desc.uniform_blocks[0].glsl_uniforms[2].type = SG_UNIFORMTYPE_MAT4;
            desc.uniform_blocks[0].glsl_uniforms[2].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[2].glsl_name = "_19.projection";
            desc.uniform_blocks[0].glsl_uniforms[3].type = SG_UNIFORMTYPE_FLOAT;
            desc.uniform_blocks[0].glsl_uniforms[3].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[3].glsl_name = "_19.opacity";
            desc.uniform_blocks[0].glsl_uniforms[4].type = SG_UNIFORMTYPE_INT;
            desc.uniform_blocks[0].glsl_uniforms[4].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[4].glsl_name = "_19.enable_shading";
            desc.images[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.images[0].image_type = SG_IMAGETYPE_2D;
            desc.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.images[0].multisampled = false;
            desc.samplers[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.image_sampler_pairs[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.image_sampler_pairs[0].image_slot = 0;
            desc.image_sampler_pairs[0].sampler_slot = 0;
            desc.image_sampler_pairs[0].glsl_name = "_diffuse_tex2D_diffuse_tex_smp";
            desc.label = "main_shader";
        }
        return &desc;
    }
    return 0;
}
