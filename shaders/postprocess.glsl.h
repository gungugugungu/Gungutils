#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline:
        sokol-shdc --input ./shaders/postprocess.glsl --output ./shaders/postprocess.glsl.h --slang glsl430

    Overview:
    =========
    Shader program: 'postprocess':
        Get shader desc: postprocess_shader_desc(sg_query_backend());
        Vertex Shader: postprocess_vs
        Fragment Shader: postprocess_fs
        Attributes:
            ATTR_postprocess_position => 0
            ATTR_postprocess_texcoord => 1
    Bindings:
        Uniform block 'fs_params':
            C struct: fs_params_t
            Bind slot: UB_fs_params => 1
        Image 'u_texture2D':
            Image type: SG_IMAGETYPE_2D
            Sample type: SG_IMAGESAMPLETYPE_FLOAT
            Multisampled: false
            Bind slot: IMG_u_texture2D => 0
        Sampler 'u_texture_smp':
            Type: SG_SAMPLERTYPE_FILTERING
            Bind slot: SMP_u_texture_smp => 0
*/
#if !defined(SOKOL_GFX_INCLUDED)
#error "Please include sokol_gfx.h before postprocess.glsl.h"
#endif
#if !defined(SOKOL_SHDC_ALIGN)
#if defined(_MSC_VER)
#define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
#else
#define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
#endif
#endif
#define ATTR_postprocess_position (0)
#define ATTR_postprocess_texcoord (1)
#define UB_fs_params (1)
#define IMG_u_texture2D (0)
#define SMP_u_texture_smp (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct fs_params_t {
    float vignette_strength;
    float vignette_radius;
    uint8_t _pad_8[8];
    HMM_Vec3 color_tint;
    float exposure;
    float contrast;
    float brightness;
    float saturation;
    float time;
} fs_params_t;
#pragma pack(pop)
/*
    #version 430

    layout(location = 0) in vec3 position;
    layout(location = 0) out vec2 uv;
    layout(location = 1) in vec2 texcoord;

    void main()
    {
        gl_Position = vec4(position, 1.0);
        uv = texcoord;
    }

*/
static const uint8_t postprocess_vs_source_glsl430[203] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x33,0x30,0x0a,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,
    0x63,0x32,0x20,0x75,0x76,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,
    0x65,0x63,0x32,0x20,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x0a,0x76,
    0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x76,
    0x65,0x63,0x34,0x28,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x31,0x2e,
    0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x76,0x20,0x3d,0x20,0x74,0x65,0x78,
    0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 430

    uniform vec4 fs_params[3];
    layout(binding = 16) uniform sampler2D u_texture2D_u_texture_smp;

    layout(location = 0) in vec2 uv;
    layout(location = 0) out vec4 frag_color;

    vec3 rgb2hsv(vec3 c)
    {
        vec4 _65 = mix(vec4(c.zy, -1.0, 0.666666686534881591796875), vec4(c.yz, 0.0, -0.3333333432674407958984375), vec4(step(c.z, c.y)));
        float _72 = _65.x;
        vec4 _90 = mix(vec4(_72, _65.yw, c.x), vec4(c.x, _65.yz, _72), vec4(step(_72, c.x)));
        float _93 = _90.x;
        float _96 = _90.w;
        float _98 = _90.y;
        float _100 = _93 - min(_96, _98);
        return vec3(abs(_90.z + ((_96 - _98) / ((6.0 * _100) + 1.0000000133514319600180897396058e-10))), _100 / (_93 + 1.0000000133514319600180897396058e-10), _93);
    }

    vec3 hsv2rgb(vec3 c)
    {
        return mix(vec3(1.0), clamp(abs((fract(c.xxx + vec3(1.0, 0.666666686534881591796875, 0.3333333432674407958984375)) * 6.0) - vec3(3.0)) - vec3(1.0), vec3(0.0), vec3(1.0)), vec3(c.y)) * c.z;
    }

    vec3 apply_vignette(vec3 color, vec2 uv_1, float strength, float radius)
    {
        return mix(color * (1.0 - strength), color, vec3(smoothstep(radius, radius - 0.300000011920928955078125, distance(uv_1, vec2(0.5)))));
    }

    vec3 tonemap_aces(vec3 color)
    {
        return clamp((color * ((color * 2.5099999904632568359375) + vec3(0.02999999932944774627685546875))) / ((color * ((color * 2.4300000667572021484375) + vec3(0.589999973773956298828125))) + vec3(0.14000000059604644775390625)), vec3(0.0), vec3(1.0));
    }

    void main()
    {
        vec3 param = ((((texture(u_texture2D_u_texture_smp, uv).xyz * fs_params[1].w) - vec3(0.5)) * fs_params[2].x) + vec3(0.5)) + vec3(fs_params[2].y);
        vec3 _267 = rgb2hsv(param);
        _267.y = _267.y * fs_params[2].z;
        vec3 param_1 = _267;
        vec3 param_2 = hsv2rgb(param_1) * fs_params[1].xyz;
        vec2 param_3 = uv;
        float param_4 = fs_params[0].x;
        float param_5 = fs_params[0].y;
        vec3 param_6 = apply_vignette(param_2, param_3, param_4, param_5);
        frag_color = vec4(clamp(pow(tonemap_aces(param_6), vec3(0.4545454680919647216796875)), vec3(0.0), vec3(1.0)), 1.0);
    }

*/
static const uint8_t postprocess_fs_source_glsl430[2053] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x62,0x69,0x6e,0x64,0x69,0x6e,0x67,0x20,0x3d,0x20,0x31,0x36,0x29,0x20,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,
    0x75,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x44,0x5f,0x75,0x5f,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x5f,0x73,0x6d,0x70,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,
    0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,
    0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,0x3b,0x0a,0x6c,0x61,0x79,
    0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,
    0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,
    0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x65,0x63,0x33,0x20,0x72,0x67,0x62,
    0x32,0x68,0x73,0x76,0x28,0x76,0x65,0x63,0x33,0x20,0x63,0x29,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x36,0x35,0x20,0x3d,0x20,0x6d,0x69,
    0x78,0x28,0x76,0x65,0x63,0x34,0x28,0x63,0x2e,0x7a,0x79,0x2c,0x20,0x2d,0x31,0x2e,
    0x30,0x2c,0x20,0x30,0x2e,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x38,0x36,0x35,0x33,
    0x34,0x38,0x38,0x31,0x35,0x39,0x31,0x37,0x39,0x36,0x38,0x37,0x35,0x29,0x2c,0x20,
    0x76,0x65,0x63,0x34,0x28,0x63,0x2e,0x79,0x7a,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,
    0x2d,0x30,0x2e,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x34,0x33,0x32,0x36,0x37,0x34,
    0x34,0x30,0x37,0x39,0x35,0x38,0x39,0x38,0x34,0x33,0x37,0x35,0x29,0x2c,0x20,0x76,
    0x65,0x63,0x34,0x28,0x73,0x74,0x65,0x70,0x28,0x63,0x2e,0x7a,0x2c,0x20,0x63,0x2e,
    0x79,0x29,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x5f,0x37,0x32,0x20,0x3d,0x20,0x5f,0x36,0x35,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x39,0x30,0x20,0x3d,0x20,0x6d,0x69,0x78,0x28,
    0x76,0x65,0x63,0x34,0x28,0x5f,0x37,0x32,0x2c,0x20,0x5f,0x36,0x35,0x2e,0x79,0x77,
    0x2c,0x20,0x63,0x2e,0x78,0x29,0x2c,0x20,0x76,0x65,0x63,0x34,0x28,0x63,0x2e,0x78,
    0x2c,0x20,0x5f,0x36,0x35,0x2e,0x79,0x7a,0x2c,0x20,0x5f,0x37,0x32,0x29,0x2c,0x20,
    0x76,0x65,0x63,0x34,0x28,0x73,0x74,0x65,0x70,0x28,0x5f,0x37,0x32,0x2c,0x20,0x63,
    0x2e,0x78,0x29,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x5f,0x39,0x33,0x20,0x3d,0x20,0x5f,0x39,0x30,0x2e,0x78,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x39,0x36,0x20,0x3d,0x20,0x5f,0x39,
    0x30,0x2e,0x77,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,
    0x39,0x38,0x20,0x3d,0x20,0x5f,0x39,0x30,0x2e,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x30,0x30,0x20,0x3d,0x20,0x5f,0x39,0x33,
    0x20,0x2d,0x20,0x6d,0x69,0x6e,0x28,0x5f,0x39,0x36,0x2c,0x20,0x5f,0x39,0x38,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x76,0x65,0x63,
    0x33,0x28,0x61,0x62,0x73,0x28,0x5f,0x39,0x30,0x2e,0x7a,0x20,0x2b,0x20,0x28,0x28,
    0x5f,0x39,0x36,0x20,0x2d,0x20,0x5f,0x39,0x38,0x29,0x20,0x2f,0x20,0x28,0x28,0x36,
    0x2e,0x30,0x20,0x2a,0x20,0x5f,0x31,0x30,0x30,0x29,0x20,0x2b,0x20,0x31,0x2e,0x30,
    0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x33,0x33,0x35,0x31,0x34,0x33,0x31,0x39,0x36,
    0x30,0x30,0x31,0x38,0x30,0x38,0x39,0x37,0x33,0x39,0x36,0x30,0x35,0x38,0x65,0x2d,
    0x31,0x30,0x29,0x29,0x29,0x2c,0x20,0x5f,0x31,0x30,0x30,0x20,0x2f,0x20,0x28,0x5f,
    0x39,0x33,0x20,0x2b,0x20,0x31,0x2e,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x33,
    0x33,0x35,0x31,0x34,0x33,0x31,0x39,0x36,0x30,0x30,0x31,0x38,0x30,0x38,0x39,0x37,
    0x33,0x39,0x36,0x30,0x35,0x38,0x65,0x2d,0x31,0x30,0x29,0x2c,0x20,0x5f,0x39,0x33,
    0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x65,0x63,0x33,0x20,0x68,0x73,0x76,0x32,0x72,
    0x67,0x62,0x28,0x76,0x65,0x63,0x33,0x20,0x63,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6d,0x69,0x78,0x28,0x76,0x65,0x63,0x33,
    0x28,0x31,0x2e,0x30,0x29,0x2c,0x20,0x63,0x6c,0x61,0x6d,0x70,0x28,0x61,0x62,0x73,
    0x28,0x28,0x66,0x72,0x61,0x63,0x74,0x28,0x63,0x2e,0x78,0x78,0x78,0x20,0x2b,0x20,
    0x76,0x65,0x63,0x33,0x28,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x36,0x36,0x36,0x36,
    0x36,0x36,0x36,0x38,0x36,0x35,0x33,0x34,0x38,0x38,0x31,0x35,0x39,0x31,0x37,0x39,
    0x36,0x38,0x37,0x35,0x2c,0x20,0x30,0x2e,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x34,
    0x33,0x32,0x36,0x37,0x34,0x34,0x30,0x37,0x39,0x35,0x38,0x39,0x38,0x34,0x33,0x37,
    0x35,0x29,0x29,0x20,0x2a,0x20,0x36,0x2e,0x30,0x29,0x20,0x2d,0x20,0x76,0x65,0x63,
    0x33,0x28,0x33,0x2e,0x30,0x29,0x29,0x20,0x2d,0x20,0x76,0x65,0x63,0x33,0x28,0x31,
    0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x30,0x29,0x2c,0x20,
    0x76,0x65,0x63,0x33,0x28,0x31,0x2e,0x30,0x29,0x29,0x2c,0x20,0x76,0x65,0x63,0x33,
    0x28,0x63,0x2e,0x79,0x29,0x29,0x20,0x2a,0x20,0x63,0x2e,0x7a,0x3b,0x0a,0x7d,0x0a,
    0x0a,0x76,0x65,0x63,0x33,0x20,0x61,0x70,0x70,0x6c,0x79,0x5f,0x76,0x69,0x67,0x6e,
    0x65,0x74,0x74,0x65,0x28,0x76,0x65,0x63,0x33,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x2c,
    0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,0x5f,0x31,0x2c,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x73,0x74,0x72,0x65,0x6e,0x67,0x74,0x68,0x2c,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x72,0x61,0x64,0x69,0x75,0x73,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6d,0x69,0x78,0x28,0x63,0x6f,0x6c,0x6f,0x72,
    0x20,0x2a,0x20,0x28,0x31,0x2e,0x30,0x20,0x2d,0x20,0x73,0x74,0x72,0x65,0x6e,0x67,
    0x74,0x68,0x29,0x2c,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x2c,0x20,0x76,0x65,0x63,0x33,
    0x28,0x73,0x6d,0x6f,0x6f,0x74,0x68,0x73,0x74,0x65,0x70,0x28,0x72,0x61,0x64,0x69,
    0x75,0x73,0x2c,0x20,0x72,0x61,0x64,0x69,0x75,0x73,0x20,0x2d,0x20,0x30,0x2e,0x33,
    0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x31,0x39,0x32,0x30,0x39,0x32,0x38,0x39,0x35,
    0x35,0x30,0x37,0x38,0x31,0x32,0x35,0x2c,0x20,0x64,0x69,0x73,0x74,0x61,0x6e,0x63,
    0x65,0x28,0x75,0x76,0x5f,0x31,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x30,0x2e,0x35,
    0x29,0x29,0x29,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x65,0x63,0x33,0x20,0x74,
    0x6f,0x6e,0x65,0x6d,0x61,0x70,0x5f,0x61,0x63,0x65,0x73,0x28,0x76,0x65,0x63,0x33,
    0x20,0x63,0x6f,0x6c,0x6f,0x72,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,
    0x74,0x75,0x72,0x6e,0x20,0x63,0x6c,0x61,0x6d,0x70,0x28,0x28,0x63,0x6f,0x6c,0x6f,
    0x72,0x20,0x2a,0x20,0x28,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x2a,0x20,0x32,0x2e,
    0x35,0x30,0x39,0x39,0x39,0x39,0x39,0x39,0x30,0x34,0x36,0x33,0x32,0x35,0x36,0x38,
    0x33,0x35,0x39,0x33,0x37,0x35,0x29,0x20,0x2b,0x20,0x76,0x65,0x63,0x33,0x28,0x30,
    0x2e,0x30,0x32,0x39,0x39,0x39,0x39,0x39,0x39,0x39,0x33,0x32,0x39,0x34,0x34,0x37,
    0x37,0x34,0x36,0x32,0x37,0x36,0x38,0x35,0x35,0x34,0x36,0x38,0x37,0x35,0x29,0x29,
    0x29,0x20,0x2f,0x20,0x28,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x2a,0x20,0x28,0x28,
    0x63,0x6f,0x6c,0x6f,0x72,0x20,0x2a,0x20,0x32,0x2e,0x34,0x33,0x30,0x30,0x30,0x30,
    0x30,0x36,0x36,0x37,0x35,0x37,0x32,0x30,0x32,0x31,0x34,0x38,0x34,0x33,0x37,0x35,
    0x29,0x20,0x2b,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x35,0x38,0x39,0x39,0x39,
    0x39,0x39,0x37,0x33,0x37,0x37,0x33,0x39,0x35,0x36,0x32,0x39,0x38,0x38,0x32,0x38,
    0x31,0x32,0x35,0x29,0x29,0x29,0x20,0x2b,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,
    0x31,0x34,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x35,0x39,0x36,0x30,0x34,0x36,0x34,
    0x34,0x37,0x37,0x35,0x33,0x39,0x30,0x36,0x32,0x35,0x29,0x29,0x2c,0x20,0x76,0x65,
    0x63,0x33,0x28,0x30,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x31,0x2e,
    0x30,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,
    0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x28,0x28,0x28,0x28,0x74,0x65,0x78,0x74,0x75,
    0x72,0x65,0x28,0x75,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x44,0x5f,0x75,
    0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x73,0x6d,0x70,0x2c,0x20,0x75,0x76,
    0x29,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x5b,0x31,0x5d,0x2e,0x77,0x29,0x20,0x2d,0x20,0x76,0x65,0x63,0x33,0x28,0x30,
    0x2e,0x35,0x29,0x29,0x20,0x2a,0x20,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,
    0x5b,0x32,0x5d,0x2e,0x78,0x29,0x20,0x2b,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,
    0x35,0x29,0x29,0x20,0x2b,0x20,0x76,0x65,0x63,0x33,0x28,0x66,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2e,0x79,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x76,0x65,0x63,0x33,0x20,0x5f,0x32,0x36,0x37,0x20,0x3d,0x20,0x72,0x67,0x62,0x32,
    0x68,0x73,0x76,0x28,0x70,0x61,0x72,0x61,0x6d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x5f,0x32,0x36,0x37,0x2e,0x79,0x20,0x3d,0x20,0x5f,0x32,0x36,0x37,0x2e,0x79,0x20,
    0x2a,0x20,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2e,0x7a,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,
    0x5f,0x31,0x20,0x3d,0x20,0x5f,0x32,0x36,0x37,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,
    0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x68,0x73,
    0x76,0x32,0x72,0x67,0x62,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x29,0x20,0x2a,
    0x20,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2e,0x78,0x79,
    0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x33,0x20,0x3d,0x20,0x75,0x76,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x34,0x20,0x3d,0x20,0x66,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x78,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x35,0x20,
    0x3d,0x20,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x79,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,
    0x5f,0x36,0x20,0x3d,0x20,0x61,0x70,0x70,0x6c,0x79,0x5f,0x76,0x69,0x67,0x6e,0x65,
    0x74,0x74,0x65,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x2c,0x20,0x70,0x61,0x72,
    0x61,0x6d,0x5f,0x33,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x34,0x2c,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x5f,0x35,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,
    0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x63,
    0x6c,0x61,0x6d,0x70,0x28,0x70,0x6f,0x77,0x28,0x74,0x6f,0x6e,0x65,0x6d,0x61,0x70,
    0x5f,0x61,0x63,0x65,0x73,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x36,0x29,0x2c,0x20,
    0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x34,0x35,0x34,0x35,0x34,0x35,0x34,0x36,0x38,
    0x30,0x39,0x31,0x39,0x36,0x34,0x37,0x32,0x31,0x36,0x37,0x39,0x36,0x38,0x37,0x35,
    0x29,0x29,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x30,0x29,0x2c,0x20,0x76,
    0x65,0x63,0x33,0x28,0x31,0x2e,0x30,0x29,0x29,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x00,
};
static inline const sg_shader_desc* postprocess_shader_desc(sg_backend backend) {
    if (backend == SG_BACKEND_GLCORE) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)postprocess_vs_source_glsl430;
            desc.vertex_func.entry = "main";
            desc.fragment_func.source = (const char*)postprocess_fs_source_glsl430;
            desc.fragment_func.entry = "main";
            desc.attrs[0].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[0].glsl_name = "position";
            desc.attrs[1].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[1].glsl_name = "texcoord";
            desc.uniform_blocks[1].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.uniform_blocks[1].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[1].size = 48;
            desc.uniform_blocks[1].glsl_uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
            desc.uniform_blocks[1].glsl_uniforms[0].array_count = 3;
            desc.uniform_blocks[1].glsl_uniforms[0].glsl_name = "fs_params";
            desc.images[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.images[0].image_type = SG_IMAGETYPE_2D;
            desc.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.images[0].multisampled = false;
            desc.samplers[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.image_sampler_pairs[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.image_sampler_pairs[0].image_slot = 0;
            desc.image_sampler_pairs[0].sampler_slot = 0;
            desc.image_sampler_pairs[0].glsl_name = "u_texture2D_u_texture_smp";
            desc.label = "postprocess_shader";
        }
        return &desc;
    }
    return 0;
}
