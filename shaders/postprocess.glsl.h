#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline:
        sokol-shdc --input ./shaders/postprocess.glsl --output ./shaders/postprocess.glsl.h --slang glsl430

    Overview:
    =========
    Shader program: 'postprocess':
        Get shader desc: postprocess_shader_desc(sg_query_backend());
        Vertex Shader: postprocess_vs
        Fragment Shader: postprocess_fs
        Attributes:
            ATTR_postprocess_position => 0
            ATTR_postprocess_texcoord => 1
    Bindings:
        Image 'u_texture2D':
            Image type: SG_IMAGETYPE_2D
            Sample type: SG_IMAGESAMPLETYPE_FLOAT
            Multisampled: false
            Bind slot: IMG_u_texture2D => 0
        Sampler 'u_texture_smp':
            Type: SG_SAMPLERTYPE_FILTERING
            Bind slot: SMP_u_texture_smp => 0
*/
#if !defined(SOKOL_GFX_INCLUDED)
#error "Please include sokol_gfx.h before postprocess.glsl.h"
#endif
#if !defined(SOKOL_SHDC_ALIGN)
#if defined(_MSC_VER)
#define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
#else
#define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
#endif
#endif
#define ATTR_postprocess_position (0)
#define ATTR_postprocess_texcoord (1)
#define IMG_u_texture2D (0)
#define SMP_u_texture_smp (0)
/*
    #version 430

    const vec2 _18[3] = vec2[](vec2(-1.0), vec2(3.0, -1.0), vec2(-1.0, 3.0));

    layout(location = 0) out vec2 uv;
    layout(location = 0) in vec3 position;
    layout(location = 1) in vec2 texcoord;

    void main()
    {
        gl_Position = vec4(_18[gl_VertexID], 0.0, 1.0);
        uv = (_18[gl_VertexID] + vec2(1.0)) * 0.5;
    }

*/
static const uint8_t postprocess_vs_source_glsl430[319] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x33,0x30,0x0a,0x0a,0x63,0x6f,
    0x6e,0x73,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x31,0x38,0x5b,0x33,0x5d,0x20,
    0x3d,0x20,0x76,0x65,0x63,0x32,0x5b,0x5d,0x28,0x76,0x65,0x63,0x32,0x28,0x2d,0x31,
    0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x33,0x2e,0x30,0x2c,0x20,0x2d,
    0x31,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x2d,0x31,0x2e,0x30,0x2c,
    0x20,0x33,0x2e,0x30,0x29,0x29,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,
    0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,
    0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,
    0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x74,
    0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,
    0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,
    0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x5f,
    0x31,0x38,0x5b,0x67,0x6c,0x5f,0x56,0x65,0x72,0x74,0x65,0x78,0x49,0x44,0x5d,0x2c,
    0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x75,0x76,0x20,0x3d,0x20,0x28,0x5f,0x31,0x38,0x5b,0x67,0x6c,0x5f,0x56,0x65,0x72,
    0x74,0x65,0x78,0x49,0x44,0x5d,0x20,0x2b,0x20,0x76,0x65,0x63,0x32,0x28,0x31,0x2e,
    0x30,0x29,0x29,0x20,0x2a,0x20,0x30,0x2e,0x35,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 430

    layout(binding = 16) uniform sampler2D u_texture2D_u_texture_smp;

    layout(location = 0) in vec2 uv;
    layout(location = 0) out vec4 frag_color;

    void main()
    {
        frag_color = vec4(texture(u_texture2D_u_texture_smp, uv).xyz, 1.0);
    }

*/
static const uint8_t postprocess_fs_source_glsl430[247] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x33,0x30,0x0a,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x62,0x69,0x6e,0x64,0x69,0x6e,0x67,0x20,0x3d,0x20,0x31,
    0x36,0x29,0x20,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,
    0x65,0x72,0x32,0x44,0x20,0x75,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x44,
    0x5f,0x75,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x73,0x6d,0x70,0x3b,0x0a,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,
    0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,
    0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,0x69,
    0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,
    0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x75,0x5f,0x74,0x65,0x78,0x74,0x75,
    0x72,0x65,0x32,0x44,0x5f,0x75,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x73,
    0x6d,0x70,0x2c,0x20,0x75,0x76,0x29,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x31,0x2e,0x30,
    0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
static inline const sg_shader_desc* postprocess_shader_desc(sg_backend backend) {
    if (backend == SG_BACKEND_GLCORE) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)postprocess_vs_source_glsl430;
            desc.vertex_func.entry = "main";
            desc.fragment_func.source = (const char*)postprocess_fs_source_glsl430;
            desc.fragment_func.entry = "main";
            desc.attrs[0].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[0].glsl_name = "position";
            desc.attrs[1].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[1].glsl_name = "texcoord";
            desc.images[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.images[0].image_type = SG_IMAGETYPE_2D;
            desc.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.images[0].multisampled = false;
            desc.samplers[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.image_sampler_pairs[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.image_sampler_pairs[0].image_slot = 0;
            desc.image_sampler_pairs[0].sampler_slot = 0;
            desc.image_sampler_pairs[0].glsl_name = "u_texture2D_u_texture_smp";
            desc.label = "postprocess_shader";
        }
        return &desc;
    }
    return 0;
}
